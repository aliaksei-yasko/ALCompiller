group ByteCode;

prog(global_variables, procedures, program, programName) ::= <<
.class public <programName>
.super java/lang/Object
    <global_variables>
    <procedures>
    <program>
>>

program(block) ::= <<
.method public static main([Ljava/lang/String;)V
.limit locals 100
.limit stack 20
    <block; separator="\n">
    return
.end method
>>

//----------------------- For write and read ---------------------

write_int(expression) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<expression>
invokevirtual java/io/PrintStream/println(I)V
>>

write_float(expression) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
<expression>
invokevirtual java/io/PrintStream/println(F)V
>>

write_string(string) ::= <<
getstatic java/lang/System/out Ljava/io/PrintStream;
ldc <string>
invokevirtual java/io/PrintStream/println(Ljava/lang/String;)V
>>


read_var_int(variableNumber) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextInt()I
istore <variableNumber>
>>

read_var_float(variableNumber) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextFloat()F
fstore <variableNumber>
>>

read_field_int(programName, fieldName) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextInt()I
putstatic <programName>/<fieldName>field I
>>

read_field_float(programName, fieldName) ::= <<
new java/util/Scanner
dup
getstatic java/lang/System/in Ljava/io/InputStream;
invokespecial java/util/Scanner/\<init\>(Ljava/io/InputStream;)V
invokevirtual java/util/Scanner/nextFloat()F
putstatic <programName>/<fieldName>field F
>>


//-----------------------------------------------------------------

// ------------------------- For procedures ------------------- 
procedure(type, ident, args, returnType, block) ::= <<
.method public static <ident>func(<args:{<it.type>}>)<type>
.limit locals 100
.limit stack 20
    <block; separator="\n">
    <returnType>
.end method
>>

parameter(type, ident) ::= "<type> <ident>"

procedure_call(programName, procedureName, argTemplates, argTypes, returnType) ::= <<
<argTemplates; separator="\n">
invokestatic <programName>/<procedureName>func(<argTypes>)<returnType>
>>

return_int() ::= <<
ireturn
>>

return_float() ::= <<
freturn
>>

// -------------------------------------------------------------------


// -------------------------- For branching statements -------------------

if_operator(expression, ifBlock, elseBlock, firstLabel, secondLabel) ::= <<
<expression>
ifne label<firstLabel>
<elseBlock; separator="\n">
goto label<secondLabel>
label<firstLabel>:
<ifBlock; separator="\n">
label<secondLabel>:
>>

for_operator(beginExpression, checkExpression, endExpression, forBlock, firstLabel, secondLabel, thirdLabel) ::= <<
<beginExpression>
label<firstLabel>:
<checkExpression>
ifne label<secondLabel>
goto label<thirdLabel>
label<secondLabel>:
<forBlock; separator="\n">
<endExpression>
goto label<firstLabel>
label<thirdLabel>:
>>

while_do(checkExpression, whileBlock, firstLabel, secondLabel, thirdLabel) ::= <<
label<firstLabel>:
<checkExpression>
ifne label<secondLabel>
goto label<thirdLabel>
label<secondLabel>:
<whileBlock; separator="\n">
goto label<firstLabel>
label<thirdLabel>:
>>

do_while(checkExpression, doBlock, firstLabel) ::= <<
label<firstLabel>:
<doBlock; separator="\n">
<checkExpression>
ifne label<firstLabel>
>>

//----------------------------------------------------------------------


// ------------------------- For assign statements -------------------
assign_var_int(expression, variableNumber) ::= <<
<expression>
istore <variableNumber>
>>

assign_var_float(expression, variableNumber) ::= <<
<expression>
fstore <variableNumber>
>>

assign_field_int(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field I
>>

assign_field_float(expression, programName, fieldName) ::= <<
<expression>
putstatic <programName>/<fieldName>field F
>>

// -------------------------------------------------------------------


// ------------------------- For variables -------------------
global_declaration(ident, type) ::= <<
.field private static <ident>field <type> <\n>
>>

declaration_int(variableNumber) ::= <<
ldc 0
istore <variableNumber>
>>

declaration_float(variableNumber) ::= <<
ldc 0.0
fstore <variableNumber>
>>

referenceVariable_int(variableNumber) ::= <<
iload <variableNumber>
>>

referenceVariable_float(variableNumber) ::= <<
fload <variableNumber>
>>

referenceField_int(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field I
>>

referenceField_float(programName, fieldName) ::= <<
getstatic <programName>/<fieldName>field F
>>

//-----------------------------------------------------------------------

//----------------------------- For logical expressions ------------------

logical_and(firstExpression, secondExpression, firstLabel, secondLabel, thirdLabel) ::= <<
<firstExpression>
ifne label<firstLabel>
ldc 0
goto label<thirdLabel>
label<firstLabel>:
<secondExpression>
ifne label<secondLabel>
ldc 0
goto label<thirdLabel>
label<secondLabel>:
ldc 1
label<thirdLabel>:
>>

logical_or(firstExpression, secondExpression, firstLabel, secondLabel, thirdLabel) ::= <<
<firstExpression>
ifne label<secondLabel>
goto label<firstLabel>
label<firstLabel>:
<secondExpression>
ifne label<secondLabel>
ldc 0
goto label<thirdLabel>
label<secondLabel>:
ldc 1
label<thirdLabel>:
>>

logical_not(expression, firstLabel, secondLabel) ::= <<
<expression>
ifne label<firstLabel>
ldc 1
goto label<secondLabel>
label<firstLabel>:
ldc 0
label<secondLabel>:
>>


//------------------------------------------------------------------------

// --------------------------- For comparison expressions --------------

comp_int_lt(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
if_icmplt label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>

comp_int_gt(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
if_icmpgt label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>

comp_int_eq(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
if_icmpeq label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>

comp_int_ne(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
if_icmpne label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>

comp_float_lt(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
fcmpg
iflt label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>

comp_float_gt(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
fcmpg
ifgt label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>


comp_float_ne(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
fcmpg
ifne label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>


comp_float_eq(firstExpression, secondExpression, firstLabel, secondLabel) ::= <<
<firstExpression>
<secondExpression>
fcmpg
ifeq label<firstLabel>
ldc 0
goto label<secondLabel>
label<firstLabel>:
ldc 1
label<secondLabel>:
>>


//-----------------------------------------------------------------------


// ------------------------- For math expressions -------------------
const_int(value) ::= <<
ldc <value>
>>

const_float(value) ::= <<
ldc <value>
>>

sub_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
isub 
>>

sub_float(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
fsub 
>>

add_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
iadd 
>>

add_float(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
fadd 
>>

div_float(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
fdiv 
>>

div_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
idiv 
>>

mult_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
imul 
>>

mult_float(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
fmul 
>>

mod_int(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
irem 
>>


mod_float(firstValue, secondValue) ::= <<
<firstValue>
<secondValue>
frem 
>>

pow_int(firstValue, secondValue) ::= <<
<firstValue>
i2d
<secondValue>
i2d
invokestatic java/lang/Math/pow(DD)D
d2i 
>>

pow_float(firstValue, secondValue) ::= <<
<firstValue>
f2d
<secondValue>
f2d
invokestatic java/lang/Math/pow(DD)D
d2f 
>>


convert_f2i(atom) ::= <<
<atom>
f2i
>>

convert_i2f(atom) ::= <<
<atom>
i2f
>>


// ---------------------------------------------------------------------- 


type_int() ::= "I"
type_float() ::= "F"
type_boolean() ::= "B"
